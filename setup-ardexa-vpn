#!/usr/bin/env bash
# PiVPN: Trivial OpenVPN setup and configuration
# Easiest setup and mangement of OpenVPN on Raspberry Pi
# http://pivpn.io
# Heavily adapted from the pi-hole.net project and...
# https://github.com/StarshipEngineer/OpenVPN-Setup/
#
# Install with this command (from your Pi):
#
# curl -L https://install.pivpn.io | bash
# Make sure you have `curl` installed
set -e

######## VARIABLES #########
setupVars=/etc/pivpn/setupVars.conf
useUpdateVars=false

### PKG Vars ###
PKG_MANAGER="apt-get"
PKG_CACHE="/var/lib/apt/lists/"
UPDATE_PKG_CACHE="${PKG_MANAGER} update"
PKG_INSTALL="${PKG_MANAGER} --yes --no-install-recommends install"
PKG_COUNT="${PKG_MANAGER} -s -o Debug::NoLocking=true upgrade | grep -c ^Inst || true"
PIVPN_DEPS=(openvpn git tar wget grep iptables-persistent dnsutils expect whiptail net-tools grepcidr jq)

###          ###

pivpnGitUrl="https://github.com/pivpn/pivpn.git"
pivpnFilesDir="/etc/.pivpn"
easyrsaVer="3.0.6"
easyrsaRel="https://github.com/OpenVPN/easy-rsa/releases/download/v${easyrsaVer}/EasyRSA-unix-v${easyrsaVer}.tgz"

# Find the rows and columns. Will default to 80x24 if it can not be detected.
screen_size=$(stty size 2>/dev/null || echo 24 80)
rows=$(echo $screen_size | awk '{print $1}')
columns=$(echo $screen_size | awk '{print $2}')

# Divide by two so the dialogs take up half of the screen, which looks nice.
r=$(( rows / 2 ))
c=$(( columns / 2 ))
# Unless the screen is tiny
r=$(( r < 20 ? 20 : r ))
c=$(( c < 70 ? 70 : c ))

######## Undocumented Flags. Shhh ########
reconfigure=false
runUnattended=true

# Find IP used to route to outside world

IPv4dev=$(ip route get 8.8.8.8 | awk '{for(i=1;i<=NF;i++)if($i~/dev/)print $(i+1)}')
IPv4addr=$(ip route get 8.8.8.8| awk '{print $7}')
IPv4gw=$(ip route get 8.8.8.8 | awk '{print $3}')

availableInterfaces=$(ip -o link | grep "state UP" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1)
dhcpcdFile=/etc/dhcpcd.conf

# Next see if we are on a tested and supported OS
function noOS_Support() {
    whiptail --msgbox --backtitle "INVALID OS DETECTED" --title "Invalid OS" "We have not been able to detect a supported OS.
Currently this installer supports Raspbian and Debian (Jessie and Stretch), Devuan (Jessie) and Ubuntu from 14.04 (trusty) to 17.04 (zesty).
If you think you received this message in error, you can post an issue on the GitHub at https://github.com/pivpn/pivpn/issues." ${r} ${c}
    exit 1
}

function maybeOS_Support() {
    if (whiptail --backtitle "Not Supported OS" --title "Not Supported OS" --yesno "You are on an OS that we have not tested but MAY work.
Currently this installer supports Raspbian and Debian (Jessie and Stretch), Devuan (Jessie) and Ubuntu from 14.04 (trusty) to 17.04 (zesty).
Would you like to continue anyway?" ${r} ${c}) then
        echo "::: Did not detect perfectly supported OS but,"
        echo "::: Continuing installation at user's own risk..."
    else
        echo "::: Exiting due to unsupported OS"
        exit 1
    fi
}

# Compatibility
distro_check() {
    # if lsb_release command is on their system
    if hash lsb_release 2>/dev/null; then

        PLAT=$(lsb_release -si)
        OSCN=$(lsb_release -sc) # We want this to be trusty xenial or jessie

    else # else get info from os-release

        source /etc/os-release
        PLAT=$(awk '{print $1}' <<< "$NAME")
        VER="$VERSION_ID"
        declare -A VER_MAP=(["10"]="buster" ["9"]="stretch" ["8"]="jessie" ["18.04"]="bionic" ["16.04"]="xenial" ["14.04"]="trusty")
        OSCN=${VER_MAP["${VER}"]}
    fi

    if [[ ${OSCN} != "bionic" ]]; then
        PIVPN_DEPS+=(dhcpcd5)

    fi

    case ${PLAT} in
        Ubuntu|Raspbian|Debian|Devuan)
        case ${OSCN} in
            trusty|xenial|jessie|stretch|buster)
            ;;
            *)
            maybeOS_Support
            ;;
        esac
        ;;
        *)
        noOS_Support
        ;;
    esac

    echo "${PLAT}" > /tmp/DET_PLATFORM
}

####### FUNCTIONS ##########
function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
        && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

#Call this function to use a regex to check user input for a valid custom domain
function valid_domain()
{
  local domain=$1
  local stat=1

  if [[ $domain =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}\.[a-zA-Z]{2,}$ ]]; then
    stat=$?
  fi
  return $stat
}

installScripts() {
    # Install the scripts from /etc/.pivpn to their various locations
    $SUDO echo ":::"
    $SUDO echo -n "::: Installing scripts to /opt/pivpn..."
    if [ ! -d /opt/pivpn ]; then
        $SUDO mkdir /opt/pivpn
        $SUDO chown "$INSTALL_USER":root /opt/pivpn
        $SUDO chmod 0755 /opt/pivpn
    fi
    $SUDO cp /etc/.pivpn/scripts/makeOVPN.sh /opt/pivpn/makeOVPN.sh
    $SUDO cp /etc/.pivpn/scripts/clientStat.sh /opt/pivpn/clientStat.sh
    $SUDO cp /etc/.pivpn/scripts/listOVPN.sh /opt/pivpn/listOVPN.sh
    $SUDO cp /etc/.pivpn/scripts/removeOVPN.sh /opt/pivpn/removeOVPN.sh
    $SUDO cp /etc/.pivpn/scripts/uninstall.sh /opt/pivpn/uninstall.sh
    $SUDO cp /etc/.pivpn/scripts/pivpnDebug.sh /opt/pivpn/pivpnDebug.sh
    $SUDO chmod 0755 /opt/pivpn/{makeOVPN,clientStat,listOVPN,removeOVPN,uninstall,pivpnDebug}.sh
    $SUDO cp /etc/.pivpn/pivpn /usr/local/bin/pivpn
    $SUDO chmod 0755 /usr/local/bin/pivpn
    $SUDO cp /etc/.pivpn/scripts/bash-completion /etc/bash_completion.d/pivpn
    . /etc/bash_completion.d/pivpn
    # Copy interface setting for debug
    $SUDO cp /tmp/pivpnINT /etc/pivpn/pivpnINTERFACE

    $SUDO echo " done."
}

package_check_install() {
    dpkg-query -W -f='${Status}' "${1}" 2>/dev/null | grep -c "ok installed" || $SUDO ${PKG_INSTALL} "${1}"
}

addSoftwareRepo() {
  # Add the official OpenVPN repo for distros that don't have the latest version in their default repos
  case ${PLAT} in
    Ubuntu|Debian|Devuan)
      case ${OSCN} in
        trusty|xenial|wheezy|jessie)
          wget -qO- https://swupdate.openvpn.net/repos/repo-public.gpg | $SUDO apt-key add -
          echo "deb http://build.openvpn.net/debian/openvpn/stable $OSCN main" | $SUDO tee /etc/apt/sources.list.d/swupdate.openvpn.net.list > /dev/null
          echo -n "::: Adding OpenVPN repo for $PLAT $OSCN ..."
          $SUDO $PKG_MANAGER -qq update
          echo " done!"
          ;;
      esac
      ;;
  esac
}

update_package_cache() {
  #Running apt-get update/upgrade with minimal output can cause some issues with
  #requiring user input

  #Check to see if apt-get update has already been run today
  #it needs to have been run at least once on new installs!
  timestamp=$(stat -c %Y ${PKG_CACHE})
  timestampAsDate=$(date -d @"${timestamp}" "+%b %e")
  today=$(date "+%b %e")


  if [ ! "${today}" == "${timestampAsDate}" ]; then
    #update package lists
    echo ":::"
    echo -ne "::: ${PKG_MANAGER} update has not been run today. Running now...\n"
    $SUDO ${UPDATE_PKG_CACHE} &> /dev/null
    echo " done!"
  fi
}

notify_package_updates_available() {
  # Let user know if they have outdated packages on their system and
  # advise them to run a package update at soonest possible.
  echo ":::"
  echo -n "::: Checking ${PKG_MANAGER} for upgraded packages...."
  updatesToInstall=$(eval "${PKG_COUNT}")
  echo " done!"
  echo ":::"
  if [[ ${updatesToInstall} -eq "0" ]]; then
    echo "::: Your system is up to date! Continuing with PiVPN installation..."
  else
    echo "::: There are ${updatesToInstall} updates available for your system!"
    echo "::: We recommend you update your OS after installing PiVPN! "
    echo ":::"
  fi
}

install_dependent_packages() {
    # Install packages passed in via argument array
    # No spinner - conflicts with set -e
    declare -a argArray1=("${!1}")

    if [[ ${OSCN} == "buster" ]]; then
        $SUDO update-alternatives --set iptables /usr/sbin/iptables-legacy
        $SUDO update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
    fi
    echo iptables-persistent iptables-persistent/autosave_v4 boolean true | $SUDO debconf-set-selections
    echo iptables-persistent iptables-persistent/autosave_v6 boolean false | $SUDO debconf-set-selections

    # Add support for https repositories if there are any that use it otherwise the installation will silently fail
    if grep -q https /etc/apt/sources.list; then
        PIVPN_DEPS+=("apt-transport-https")
    fi

    for i in "${argArray1[@]}"; do
        echo -n ":::    Checking for $i..."
        package_check_install "${i}" &> /dev/null
        echo " installed!"
    done
}

stopServices() {
    # Stop openvpn
    $SUDO echo ":::"
    $SUDO echo -n "::: Stopping OpenVPN service..."
    case ${PLAT} in
        Debian)
            $SUDO systemctl stop openvpn@server || true
            ;;
        *)
            $SUDO systemctl stop openvpn.service || true
            ;;
    esac
    $SUDO echo " done."
}

getGitFiles() {
    # Setup git repos for base files
    echo ":::"
    echo "::: Checking for existing base files..."
    if is_repo "${1}"; then
        update_repo "${1}" "${2}"
    else
        make_repo "${1}" "${2}"
    fi
}

is_repo() {
    # If the directory does not have a .git folder it is not a repo
    echo -n ":::    Checking $1 is a repo..."
    cd "${1}" &> /dev/null || return 1
    $SUDO git status &> /dev/null && echo " OK!"; return 0 || echo " not found!"; return 1
}

make_repo() {
    # Remove the non-repos interface and clone the interface
    echo -n ":::    Cloning $2 into $1..."
    $SUDO rm -rf "${1}"
    $SUDO git clone -q --depth 1 --no-single-branch "${2}" "${1}" > /dev/null
    if [ -z "${TESTING+x}" ]; then
        :
    else
        $SUDO git -C "${1}" checkout test
    fi
    echo " done!"
}

update_repo() {
    if [[ "${reconfigure}" == true ]]; then
          echo "::: --reconfigure passed to install script. Not downloading/updating local repos"
    else
        # Pull the latest commits
        echo -n ":::     Updating repo in $1..."
        $SUDO rm -rf "${1}"
        # Go back to /etc otherwhise git will complain when the current working directory has
        # just been deleted (/etc/.pivpn).
        cd /etc
        $SUDO git clone -q --depth 1 --no-single-branch "${2}" "${1}" > /dev/null
        cd "${1}" || exit 1
        if [ -z "${TESTING+x}" ]; then
            :
        else
            ${SUDOE} git checkout test
        fi
        echo " done!"
    fi
}

confOpenVPN() {
    # Grab the existing Hostname
    HOST_NAME=$(hostname -s)
    # Generate a random UUID for this server so that we can use verify-x509-name later that is unique for this server installation.
    NEW_UUID=$(</proc/sys/kernel/random/uuid)
    # Create a unique server name using the host name and UUID
    SERVER_NAME="${HOST_NAME}_${NEW_UUID}"

    declare -A ECDSA_MAP=(["256"]="prime256v1" ["384"]="secp384r1" ["521"]="secp521r1")

    if [[ ${useUpdateVars} == false ]]; then
        # Ask user for desired level of encryption

        if [[ ${useUpdateVars} == false ]]; then

            if [[ ${PLAT} == "Raspbian" ]] && [[ ${OSCN} != "stretch" ]] && [[ ${OSCN} != "buster" ]] ; then

                APPLY_TWO_POINT_FOUR=false
            else
                if (whiptail --backtitle "Setup OpenVPN" --title "Installation mode" --yesno "OpenVPN 2.4 brings support for stronger authentication and key exchange using Elliptic Curves, along with encrypted control channel.\n\nIf your clients do run OpenVPN 2.4 or later you can enable these features, otherwise choose 'No' for best compatibility.\n\nNOTE: Current mobile app, that is OpenVPN connect, is supported." ${r} ${c}); then
                    APPLY_TWO_POINT_FOUR=true
                    $SUDO touch /etc/pivpn/TWO_POINT_FOUR
                else
                    APPLY_TWO_POINT_FOUR=false
                fi
            fi
        fi

        if [[ ${runUnattended} == true ]] && [[ ${APPLY_TWO_POINT_FOUR} == true ]]; then
            $SUDO touch /etc/pivpn/TWO_POINT_FOUR
        fi

        if [[ ${APPLY_TWO_POINT_FOUR} == false ]]; then

            ENCRYPT=$(whiptail --backtitle "Setup OpenVPN" --title "RSA certificate size" --radiolist \
            "Choose the desired size of your certificate (press space to select):\n   This is a certificate that will be generated on your system.  The larger the certificate, the more time this will take.  For most applications, it is recommended to use 2048 bits.  If you are testing, you can use 1024 bits to speed things up, but do not use this for normal use!  If you are paranoid about ... things... then grab a cup of joe and pick 4096 bits." ${r} ${c} 3 \
            "1024" "Use a 1024-bit certificate (testing only)" OFF \
            "2048" "Use a 2048-bit certificate (recommended level)" ON \
            "4096" "Use a 4096-bit certificate (paranoid level)" OFF 3>&1 1>&2 2>&3)

        else

            ENCRYPT=$(whiptail --backtitle "Setup OpenVPN" --title "ECDSA certificate size" --radiolist \
            "Choose the desired size of your certificate (press space to select):\n   This is a certificate that will be generated on your system.  The larger the certificate, the more time this will take.  For most applications, it is recommended to use 256 bits.  You can increase the number of bits if you care about, however, consider that 256 bits are already as secure as 3072 bit RSA." ${r} ${c} 3 \
            "256" "Use a 256-bit certificate (recommended level)" ON \
            "384" "Use a 384-bit certificate" OFF \
            "521" "Use a 521-bit certificate (paranoid level)" OFF 3>&1 1>&2 2>&3)

        fi

        exitstatus=$?
        if [ $exitstatus != 0 ]; then
            echo "::: Cancel selected. Exiting..."
            exit 1
        fi
    fi

    if [[ ${runUnattended} == true ]] && [[ ${APPLY_TWO_POINT_FOUR} == true ]]; then
        $SUDO touch /etc/pivpn/TWO_POINT_FOUR
    fi

    # If easy-rsa exists, remove it
    if [[ -d /etc/openvpn/easy-rsa/ ]]; then
        $SUDO rm -rf /etc/openvpn/easy-rsa/
    fi


    # Get easy-rsa
    wget -q -O - "${easyrsaRel}" | $SUDO tar xz -C /etc/openvpn && $SUDO mv /etc/openvpn/EasyRSA-v${easyrsaVer} /etc/openvpn/easy-rsa
    # fix ownership
    $SUDO chown -R root:root /etc/openvpn/easy-rsa
    $SUDO mkdir /etc/openvpn/easy-rsa/pki

    cd /etc/openvpn/easy-rsa || exit

    # Write out new vars file
    set +e
    IFS= read -d '' String <<"EOF"
if [ -z "$EASYRSA_CALLER" ]; then
    echo "Nope." >&2
    return 1
fi
set_var EASYRSA            "/etc/openvpn/easy-rsa"
set_var EASYRSA_PKI        "$EASYRSA/pki"
set_var EASYRSA_CRL_DAYS   3650
EOF
    echo "${String}" | $SUDO tee vars >/dev/null
    set -e

    # Set certificate type
    if [[ ${APPLY_TWO_POINT_FOUR} == false ]]; then
        echo "set_var EASYRSA_ALGO       rsa" | $SUDO tee -a vars
        echo "set_var EASYRSA_KEY_SIZE   ${ENCRYPT}" | $SUDO tee -a vars
    else
        echo "set_var EASYRSA_ALGO       ec" | $SUDO tee -a vars
        echo "set_var EASYRSA_CURVE      ${ECDSA_MAP["${ENCRYPT}"]}" | $SUDO tee -a vars
    fi

    # Remove any previous keys
    ${SUDOE} ./easyrsa --batch init-pki

    # Build the certificate authority
    printf "::: Building CA...\n"
    ${SUDOE} ./easyrsa --batch build-ca nopass
    printf "\n::: CA Complete.\n"

    if [[ ${useUpdateVars} == false ]]; then
        if [[ ${APPLY_TWO_POINT_FOUR} == false ]]; then
            whiptail --msgbox --backtitle "Setup OpenVPN" --title "Server Information" "The server key, Diffie-Hellman parameters, and HMAC key will now be generated." ${r} ${c}
        fi
    fi

    # Build the server
    EASYRSA_CERT_EXPIRE=3650 ${SUDOE} ./easyrsa build-server-full ${SERVER_NAME} nopass

    if [[ ${useUpdateVars} == false ]]; then
      if [[ ${APPLY_TWO_POINT_FOUR} == false ]]; then
        if ([ "$ENCRYPT" -ge "4096" ] && whiptail --backtitle "Setup OpenVPN" --title "Download Diffie-Hellman Parameters" --yesno --defaultno "Download Diffie-Hellman parameters from a public DH parameter generation service?\n\nGenerating DH parameters for a $ENCRYPT-bit key can take many hours on a Raspberry Pi. You can instead download DH parameters from \"2 Ton Digital\" that are generated at regular intervals as part of a public service. Downloaded DH parameters will be randomly selected from their database.\nMore information about this service can be found here: https://2ton.com.au/safeprimes/\n\nIf you're paranoid, choose 'No' and Diffie-Hellman parameters will be generated on your device." ${r} ${c}); then
          DOWNLOAD_DH_PARAM=true
        else
          DOWNLOAD_DH_PARAM=false
        fi
      else
        DOWNLOAD_DH_PARAM=false
      fi
    fi

    if [[ ${APPLY_TWO_POINT_FOUR} == false ]]; then
      if [ "$ENCRYPT" -ge "4096" ] && [[ ${DOWNLOAD_DH_PARAM} == true ]]; then
        # Downloading parameters
        ${SUDOE} curl "https://2ton.com.au/getprimes/random/dhparam/${ENCRYPT}" -o "/etc/openvpn/easy-rsa/pki/dh${ENCRYPT}.pem"
      else
        # Generate Diffie-Hellman key exchange
        ${SUDOE} ./easyrsa gen-dh
        ${SUDOE} mv pki/dh.pem pki/dh${ENCRYPT}.pem
      fi
    fi

    # Generate static HMAC key to defend against DDoS
    ${SUDOE} openvpn --genkey --secret pki/ta.key

    # Generate an empty Certificate Revocation List
    ${SUDOE} ./easyrsa gen-crl
    ${SUDOE} cp pki/crl.pem /etc/openvpn/crl.pem
    ${SUDOE} chown nobody:nogroup /etc/openvpn/crl.pem

    # Write config file for server using the template.txt file
    $SUDO cp /etc/.pivpn/server_config.txt /etc/openvpn/server.conf

    if [[ ${APPLY_TWO_POINT_FOUR} == true ]]; then
      #If they enabled 2.4 use tls-crypt instead of tls-auth to encrypt control channel
      $SUDO sed -i "s/tls-auth \/etc\/openvpn\/easy-rsa\/pki\/ta.key 0/tls-crypt \/etc\/openvpn\/easy-rsa\/pki\/ta.key/" /etc/openvpn/server.conf
    fi

    if [[ ${APPLY_TWO_POINT_FOUR} == true ]]; then
      #If they enabled 2.4 disable dh parameters since the key exchange will use the matching curve from the ECDSA certificate
      $SUDO sed -i "s/\(dh \/etc\/openvpn\/easy-rsa\/pki\/dh\).*/dh none/" /etc/openvpn/server.conf
    else
      # Otherwise set the user encryption key size
      $SUDO sed -i "s/\(dh \/etc\/openvpn\/easy-rsa\/pki\/dh\).*/\1${ENCRYPT}.pem/" /etc/openvpn/server.conf
    fi

    # if they modified port put value in server.conf
    if [ $PORT != 1194 ]; then
        $SUDO sed -i "s/1194/${PORT}/g" /etc/openvpn/server.conf
    fi

    # if they modified protocol put value in server.conf
    if [ "$PROTO" != "udp" ]; then
        $SUDO sed -i "s/proto udp/proto tcp/g" /etc/openvpn/server.conf
    fi

    # write out server certs to conf file
    $SUDO sed -i "s/\(key \/etc\/openvpn\/easy-rsa\/pki\/private\/\).*/\1${SERVER_NAME}.key/" /etc/openvpn/server.conf
    $SUDO sed -i "s/\(cert \/etc\/openvpn\/easy-rsa\/pki\/issued\/\).*/\1${SERVER_NAME}.crt/" /etc/openvpn/server.conf
}

confNetwork() {
    # Enable forwarding of internet traffic
    $SUDO sed -i '/net.ipv4.ip_forward=1/s/^#//g' /etc/sysctl.conf
    $SUDO sysctl -p

    # if ufw enabled, configure that (running as root because sometimes the executable is not in the user's $PATH, on Debian for example)
    if $SUDO bash -c 'hash ufw' 2>/dev/null; then
        if LANG=en_US.UTF-8 $SUDO ufw status | grep -q inactive
        then
            noUFW=1
        else
            echo "::: Detected UFW is enabled."
            echo "::: Adding UFW rules..."
            $SUDO sed "/delete these required/i *nat\n:POSTROUTING ACCEPT [0:0]\n-I POSTROUTING -s 10.8.0.0/24 -o $IPv4dev -j MASQUERADE\nCOMMIT\n" -i /etc/ufw/before.rules
            # Insert rules at the beginning of the chain (in case there are other rules that may drop the traffic)

            # https://askubuntu.com/a/712202
            INSTALLED_UFW=$(dpkg-query --showformat='${Version}' --show ufw)
            MINIMUM_UFW=0.34

            if $SUDO dpkg --compare-versions "$INSTALLED_UFW" ge "$MINIMUM_UFW"; then
                # Don't forward everything, just the traffic originated from the VPN subnet
                $SUDO ufw route insert 1 allow in on tun0 from 10.8.0.0/24 out on "$IPv4dev" to any >/dev/null
                echo 0 > /tmp/OLD_UFW
            else
                # This ufw version does not support route command, fallback to policy change
                $SUDO sed -i "s/\(DEFAULT_FORWARD_POLICY=\).*/\1\"ACCEPT\"/" /etc/default/ufw
                echo 1 > /tmp/OLD_UFW
            fi

            $SUDO ufw reload >/dev/null
            echo "::: UFW configuration completed."
        fi
    else
        noUFW=1
    fi
    # else configure iptables
    if [[ $noUFW -eq 1 ]]; then
        echo "UFW must be installed and enabled"
        exit 1
    else
        echo 0 > /tmp/noUFW
    fi

    echo "$INPUT_CHAIN_EDITED" > /tmp/INPUT_CHAIN_EDITED
    echo "$FORWARD_CHAIN_EDITED" > /tmp/FORWARD_CHAIN_EDITED

    $SUDO cp /tmp/noUFW /etc/pivpn/NO_UFW
    $SUDO cp /tmp/OLD_UFW /etc/pivpn/OLD_UFW
    $SUDO cp /tmp/INPUT_CHAIN_EDITED /etc/pivpn/INPUT_CHAIN_EDITED
    $SUDO cp /tmp/FORWARD_CHAIN_EDITED /etc/pivpn/FORWARD_CHAIN_EDITED
}

confOVPN() {
    $SUDO cp /tmp/INSTALL_USER /etc/pivpn/INSTALL_USER
    $SUDO cp /tmp/DET_PLATFORM /etc/pivpn/DET_PLATFORM

    $SUDO cp /etc/.pivpn/Default.txt /etc/openvpn/easy-rsa/pki/Default.txt

    if [[ ${APPLY_TWO_POINT_FOUR} == true ]]; then
      #If they enabled 2.4 remove key-direction options since it's not required
      $SUDO sed -i "/key-direction 1/d" /etc/openvpn/easy-rsa/pki/Default.txt
    fi

    $SUDO sed -i 's/IPv4pub/'"$PUBLICDNS"'/' /etc/openvpn/easy-rsa/pki/Default.txt

    # if they modified port put value in Default.txt for clients to use
    if [ $PORT != 1194 ]; then
        $SUDO sed -i -e "s/1194/${PORT}/g" /etc/openvpn/easy-rsa/pki/Default.txt
    fi

    # if they modified protocol put value in Default.txt for clients to use
    if [ "$PROTO" != "udp" ]; then
        $SUDO sed -i -e "s/proto udp/proto tcp/g" /etc/openvpn/easy-rsa/pki/Default.txt
    fi

    # verify server name to strengthen security
    $SUDO sed -i "s/SRVRNAME/${SERVER_NAME}/" /etc/openvpn/easy-rsa/pki/Default.txt

    INSTALL_HOME=$(grep -m1 "^${INSTALL_USER}:" /etc/passwd | cut -d: -f6)
    INSTALL_HOME=${INSTALL_HOME%/} # remove possible trailing slash
    if [ ! -d "$INSTALL_HOME/ovpns" ]; then
        $SUDO mkdir "$INSTALL_HOME/ovpns"
    fi
    $SUDO chmod 0750 "$INSTALL_HOME/ovpns"
    $SUDO chown $INSTALL_USER:$INSTALL_USER "$INSTALL_HOME/ovpns"
}

confLogging() {
  echo "if \$programname == 'ovpn-server' then /var/log/openvpn.log
if \$programname == 'ovpn-server' then stop" | $SUDO tee /etc/rsyslog.d/30-openvpn.conf > /dev/null

  echo "/var/log/openvpn.log
{
    rotate 4
    weekly
    missingok
    notifempty
    compress
    delaycompress
    sharedscripts
    postrotate
        invoke-rc.d rsyslog rotate >/dev/null 2>&1 || true
    endscript
}" | $SUDO tee /etc/logrotate.d/openvpn > /dev/null

  # Restart the logging service
  $SUDO systemctl restart rsyslog.service || true
}

finalExports() {
    # Update variables in setupVars.conf file
    if [ -e "${setupVars}" ]; then
        $SUDO sed -i.update.bak '/INSTALL_USER/d;/pivpnInterface/d;/IPv4dns/d;/IPv4addr/d;/IPv4gw/d;/pivpnProto/d;/PORT/d;/ENCRYPT/d;/DOWNLOAD_DH_PARAM/d;/PUBLICDNS/d;/OVPNDNS1/d;/OVPNDNS2/d;' "${setupVars}"
    fi
    {
        echo "INSTALL_USER=${INSTALL_USER}"
        echo "pivpnInterface=${pivpnInterface}"
        echo "IPv4dns=${IPv4dns}"
        echo "IPv4addr=${IPv4addr}"
        echo "IPv4gw=${IPv4gw}"
        echo "pivpnProto=${pivpnProto}"
        echo "PORT=${PORT}"
        echo "ENCRYPT=${ENCRYPT}"
        echo "APPLY_TWO_POINT_FOUR=${APPLY_TWO_POINT_FOUR}"
        echo "DOWNLOAD_DH_PARAM=${DOWNLOAD_DH_PARAM}"
        echo "PUBLICDNS=${PUBLICDNS}"
        echo "OVPNDNS1=${OVPNDNS1}"
        echo "OVPNDNS2=${OVPNDNS2}"
    } | $SUDO tee "${setupVars}" > /dev/null
}


# I suggest replacing some of these names.

#accountForRefactor() {
#    # At some point in the future this list can be pruned, for now we'll need it to ensure updates don't break.
#
#    # Refactoring of install script has changed the name of a couple of variables. Sort them out here.
#    sed -i 's/INSTALL_USER/PIVPN_USER/g' ${setupVars}
#    sed -i 's/pivpnInterface/PIVPN_INTERFACE/g' ${setupVars}
#    sed -i 's/IPv4dns/IPV4_DNS/g' ${setupVars}
#    sed -i 's/IPv4addr/IPV4_ADDRESS/g' ${setupVars}
#    sed -i 's/IPv4gw/IPV4_GATEWAY/g' ${setupVars}
#    sed -i 's/pivpnProto/TRANSPORT_LAYER/g' ${setupVars}
#    #sed -i 's/PORT/PORT/g' ${setupVars}
#    #sed -i 's/ENCRYPT/ENCRYPT/g' ${setupVars}
#    #sed -i 's/DOWNLOAD_DH_PARAM/DOWNLOAD_DH_PARAM/g' ${setupVars}
#    sed -i 's/PUBLICDNS/PUBLIC_DNS/g' ${setupVars}
#    sed -i 's/OVPNDNS1/OVPN_DNS_1/g' ${setupVars}
#    sed -i 's/OVPNDNS2/OVPN_DNS_2/g' ${setupVars}
#}

updatePiVPN() {
    #accountForRefactor
    stopServices
    installScripts

    # setCustomProto
    # write out the PROTO
    PROTO=$pivpnProto
    $SUDO cp /tmp/pivpnPROTO /etc/pivpn/INSTALL_PROTO

    #setCustomPort
    # write out the port
    $SUDO cp /tmp/INSTALL_PORT /etc/pivpn/INSTALL_PORT

    confOpenVPN
    confNetwork
    confOVPN

    # ?? Is this always OK? Also if you only select one DNS server ??
    $SUDO sed -i /dhcp-option/d /etc/openvpn/server.conf
    #$SUDO sed -i '0,/\(dhcp-option DNS \)/ s/\(dhcp-option DNS \).*/\1'${OVPNDNS1}'\"/' /etc/openvpn/server.conf
    #$SUDO sed -i '0,/\(dhcp-option DNS \)/! s/\(dhcp-option DNS \).*/\1'${OVPNDNS2}'\"/' /etc/openvpn/server.conf

    finalExports #re-export setupVars.conf to account for any new vars added in new versions
}


clone_or_update_repos() {
    if [[ "${reconfigure}" == true ]]; then
        echo "::: --reconfigure passed to install script. Not downloading/updating local repos"
    else
        # Get Git files
        getGitFiles ${pivpnFilesDir} ${pivpnGitUrl} || \
        { echo "!!! Unable to clone ${pivpnGitUrl} into ${pivpnFilesDir}, unable to continue."; \
            exit 1; \
        }
    fi
}


######## SCRIPT ############

main() {

    ######## FIRST CHECK ########
    # Must be root to install
    echo ":::"
    if [[ $EUID -eq 0 ]];then
        echo "::: You are root."
    else
        echo "::: sudo will be used for the install."
        # Check if it is actually installed
        # If it isn't, exit because the install cannot complete
        if [[ $(dpkg-query -s sudo) ]];then
            export SUDO="sudo"
            export SUDOE="sudo -E"
        else
            echo "::: Please install sudo or run this as root."
            exit 1
        fi
    fi

    # Check for supported distribution
    distro_check

    # Check arguments for the undocumented flags
    for var in "$@"; do
        case "$var" in
            "--reconfigure"  ) reconfigure=true;;
        esac
    done

    if [[ -f ${setupVars} ]]; then
        if [[ "${runUnattended}" == true ]]; then
            echo "::: --unattended passed to install script, no whiptail dialogs will be displayed"
            useUpdateVars=true
        fi
    fi

    # Start the installer
    # Install the packages (we do this first because we need whiptail)
    addSoftwareRepo

    update_package_cache

    # Notify user of package availability
    notify_package_updates_available


    # Install packages used by this installation script
    install_dependent_packages PIVPN_DEPS[@]

    # Source ${setupVars} for use in the rest of the functions.
    source ${setupVars}

    echo "::: Using IP address: $IPv4addr"
    echo "${IPv4addr%/*}" > /tmp/pivpnIP
    echo "::: Using interface: $pivpnInterface"
    echo "${pivpnInterface}" > /tmp/pivpnINT
    echo "::: Using User: $INSTALL_USER"
    echo "${INSTALL_USER}" > /tmp/INSTALL_USER
    echo "::: Using protocol: $pivpnProto"
    echo "${pivpnProto}" > /tmp/pivpnPROTO
    echo "::: Using port: $PORT"
    echo ${PORT} > /tmp/INSTALL_PORT
    echo ":::"

    # Clone/Update the repos
    clone_or_update_repos

    updatePiVPN

    echo "::: Restarting services..."
    # Start services
    case ${PLAT} in
        Debian)
            $SUDO systemctl enable openvpn@server
            $SUDO systemctl start openvpn@server
            ;;
        *)
            $SUDO systemctl enable openvpn.service
            $SUDO systemctl start openvpn.service
            ;;
    esac

    # Ensure that cached writes reach persistent storage
    echo "::: Flushing writes to disk..."
    sync

    echo "::: done."
    echo ":::"
    echo "::: Update complete!"
    echo ":::"
}

if [[ "${PIVPN_TEST}" != true ]] ; then
  main "$@"
fi
